wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this-this_moment)
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(03:22:14)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- ymd("June 17, 2008", tzone = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tzone = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tz = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval()
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
?version
R.Version()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low(ppm)
low
hight
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v=median(ppm, col = "magenta", lwd = 4)
abline(v=median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution, pm25~region, col = "red")
boxplot(pm25~region, poluttion, col = "red")
boxplot(pm25~region, pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region=="east")
head(east)
hist(east, pm25, col = "green")
hist(east$pm25, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
plot(pollution, )
with(pollution, plot(lattitude, pm25))
with(pollution, plot(latitude, pm25))
abline(x=12)
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
quit()
installed.packages()
install.packages("tidyverse")
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg , facets = . ~ drv)
qplot(hwy, data = mpg , facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg , geom = c("point", "smooth"), facet = . ~ drv)
qplot(displ, hwy, data = mpg , geom = c("point", "smooth"), facets = . ~ drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(size = 2, alpha = 1/2, aes(color = drv)) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = . ~ cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length =4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
quit()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?llines()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
ints
library(dplyr)
library(lubridate)
library(ggplot2)
if (!file.exists("data")) {
dir.create("data")
}
unzip("./activity.zip", exdir = "./data")
data <- read.csv("./data/activity.csv")
data[,2] <- as_date(data[,2])
data[,1] <- as.numeric(data[,1])
spd <- data %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
as.data.frame(spd)
spd
ints <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = TRUE)) %>%
as.data.frame(ints)
plot(x = ints$interval, y = ints$steps, type = "l", xlab = "5-minute Interval of Day",
ylab = "Average Number of Steps (All Days)", main =
"Average Number of Steps per Interval Across All Days")
filter(ints, steps == max(ints[,2]))
ints
steps.na <- data$interval[is.na(data$steps)]
steps.na
index <- sapply(steps.na, function(steps) which(ints$interval == steps))
index
data$steps[is.na(data$steps)] <- ints$steps[index]
str(data)
sum(is.na(data))
data$steps
ints
library(dplyr)
library(lubridate)
library(ggplot2)
if (!file.exists("data")) {
dir.create("data")
}
unzip("./activity.zip", exdir = "./data")
data <- read.csv("./data/activity.csv")
data[,2] <- as_date(data[,2])
data[,1] <- as.numeric(data[,1])
spd <- data %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
as.data.frame(spd)
spd
ints <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = TRUE)) %>%
as.data.frame(ints)
plot(x = ints$interval, y = ints$steps, type = "l", xlab = "5-minute Interval of Day",
ylab = "Average Number of Steps (All Days)", main =
"Average Number of Steps per Interval Across All Days")
data.na <- data
View(data.na)
View(data.na)
View(data.na)
View(data.na)
rm(data.na)
?sapply
sum(is.na(data))
data.nafill <- data
steps.na <- data.nafill$interval[is.na(data.nafill$steps)]
index <- sapply(steps.na, function(x) which(ints$interval == steps))
data.nafill <- data
steps.na <- data.nafill$interval[is.na(data.nafill$steps)]
index <- sapply(steps.na, function(steps) which(ints$interval == steps))
data.nafill$steps[is.na(data.nafill$steps)] <- ints$steps[index]
steps.na
index
View(index)
View(steps.na)
head(data, 2000)
index
data.nafill
ints
rm(data.nafill)
sum(is.na(data))
data.nafill <- data
steps.na <- data.nafill$interval[is.na(data.nafill$steps)]
index <- sapply(steps.na, function(steps) which(ints$interval == steps))
data.nafill
View(index)
data[is.na(data$steps)]
data$date[is.na(data$steps)]
filter(data, is.na(data$steps))
View(filter(data, is.na(data$steps)))
data.nafill$steps[is.na(data.nafill$steps)] <- ints$steps[index]
data.nafill
sum(is.na(data.nafill)
sum(is.na(data.nafill))
spd.nafill
spd.nafill <- data.nafill %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
as.data.frame(spd.nafill)
hist(spd.nafill$steps, main = "Total Steps Per Day", xlab = "Steps", col = "red", breaks = 10)
rug(spd.nafill$steps)
mean(spd.nafill$steps)
median(spd.nafill$steps)
spd.nafill
mean(spd.nafill)
summarise(spd.nafill)
summarise(spd.nafill$steps)
mean(spd.nafill$steps)
median(spd.nafill$steps)
str(data.nafill)
mutate(data.nafill, daytype = wday(data.nafill$date))
str(data.nafill)
str(mutate(data.nafill, daytype = wday(data.nafill$date)))
?wday
##replace row values in "activity" column with activites and make column names lower case
activity <- read.table("./data/UCI HAR Dataset/activity_labels.txt")
activity
data.wday <- data.nafill %>%
weekend <- c(6, 7) %>%
wwday <- factor((wday(data.nafill$date) %in% weekend), levels = c(TRUE, FALSE),
labels = c("weekend", "weekday"))
mutate(daytype = wwday) %>%
weekend <- c(6, 7) %>%
data.wday <- data.nafill %>%
wwday <- factor((wday(data.nafill$date) %in% weekend), levels = c(TRUE, FALSE),
labels = c("weekend", "weekday")) %>%
mutate(daytype = wwday) %>%
weekend <- c(6, 7) %>%
data.wday <- data.nafill
data.wday %>% wwday <- factor((wday(data.nafill$date) %in% weekend), levels = c(TRUE, FALSE),
labels = c("weekend", "weekday")) %>%
mutate(daytype = wwday) %>%
weekend <- c(6, 7)
data.wday <- data.nafill
data.wday %>% wwday <- factor((wday(data.nafill$date) %in% weekend), levels = c(TRUE, FALSE),
labels = c("weekend", "weekday")) %>%
mutate(daytype = wwday) %>%
weekend <- c(6, 7)
data.wday <- data.nafill
data.wday %>% wwday <- factor((wday(data.nafill$date) %in% weekend), levels = c(TRUE, FALSE),
labels = c("weekend", "weekday")) %>%
mutate(daytype = wwday)
weekend <- c(6, 7)
data.wday <- data.nafill
data.wday$daytype <- factor((wday(data.wday$date) %in% weekend), levels = c(TRUE, FALSE),
labels = c("weekend", "weekday"))
data.wday
str(data.wday)
wend <- filter(data.wday, daytype = "weekend")
wend <- filter(data.wday, daytype == "weekend")
wend
wday <- filter(data.wday, daytype == "weekday")
endints <- wend %>%
group_by(interval) %>%
summarise(steps = mean(steps)) %>%
as.data.frame(endints)
dayints <- wday %>%
group_by(interval) %>%
summarise(steps = mean(steps)) %>%
as.data.frame(dayints)
endints
endints <- wend %>%
group_by(interval) %>%
summarise(steps = mean(steps)) %>%
as.data.frame(endints)
dayints <- wday %>%
group_by(interval) %>%
summarise(steps = mean(steps)) %>%
as.data.frame(dayints)
par(mfrow = c(2, 1))
plot(x = endints$interval, y = endints$steps, type = "l")
plot(x = dayints$interval, y = dayints$steps, type = "l")
par(mfrow = c(2, 1))
plot(x = endints$interval, y = endints$steps, type = "l")
plot(x = dayints$interval, y = dayints$steps, type = "l")
par(mfrow = c(2, 1))
plot(x = endints$interval, y = endints$steps, type = "l")
plot(x = dayints$interval, y = dayints$steps, type = "l")
par(mfrow = c(2, 1), mar = 1,1,1,1)
plot(x = endints$interval, y = endints$steps, type = "l")
plot(x = dayints$interval, y = dayints$steps, type = "l")
par(mfrow = c(2, 1), mar = c(1,1,1,1))
plot(x = endints$interval, y = endints$steps, type = "l")
plot(x = dayints$interval, y = dayints$steps, type = "l")
plot(xlab = "5-minute Interval of Day", ylab = "Average Number of Steps", main =
"Average Number of Steps per Interval Across Weekends and Weekdays")
library(dplyr)
library(lubridate)
library(lattice)
setwd("C:/Users/Harland/Desktop/Coursera/SevereWeather_RepData")
fileurl = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if (!file.exists("data")) {
dir.create("data")
}
download.file(fileurl, destfile = "./data/stormdata.csv.bz2",
mode = "wb")
unzip("./data/stormdata.csv.bz2", exdir = "./data")
data <- read.table("./data/stormdata.csv.bz2")
?read.table
library(R.utils)
install.packages("R.utils")
library(R.utils)
?bunzip2
bunzip2("./data/stormdata.csv.bz2", "stormdata.csv", remove = FALSE, skip = TRUE)
bunzip2("./data/stormdata.csv.bz2", "./data/stormdata.csv", remove = FALSE, skip = TRUE)
data <- read.csv("./data/stormdata.csv")
str(data)
?sessionInfo
sessionInfo
sessionInfo()
head(data)
?select
healthdata <- data %>%
select(EVTYPE, FATALITIES, INJURIES) %>%
rename(tolower(colnames)) %>%
mutate(total_affected = fatalities * injuries)
healthdata <- data %>%
select(EVTYPE, FATALITIES, INJURIES)
healthdata
healthdata <- mutate(healthdata, total_affected = sum(FATALITIES, INJURIES))
healthdata
healthdata <- mutate(healthdata, total_affected = FATALITIES + INJURIES)
healthdata
healthdata <- rename_all(healthdata, tolower(colnames(healthdata)))
?rename_all
healthdata <- rename_all(healthdata, tolower())
healthdata <- rename_all(healthdata, tolower)
healthdata
healthdata <- data %>%
select(EVTYPE, FATALITIES, INJURIES) %>%
mutate(total_affected = FATALITIES + INJURIES) %>%
rename_all(tolower)
healthdata
library(ggplot2)
str(data)
econdata <- data %>%
select(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
rename_all(tolower)
econdata
?replace
?mutate
?mutate
?replace
str(econdata)
levels(econdata$propdmgexp)
econdata <- data %>%
select(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
rename_all(tolower) %>%
add_column(propdmgmult = 1, cropdmgmult = 1)
econdata <- data %>%
select(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
rename_all(tolower) %>%
mutate(propdmgmult = propdmgexp) %>%
mutate(cropdmgmult = cropdmgexp)
econdata
econdata <- data %>%
select(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
rename_all(tolower) %>%
mutate(propdmgmult = propdmgexp) %>%
mutate(cropdmgmult = cropdmgexp) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == H, 10^2)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == K, 10^3)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == M, 10^6)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == B, 10^9)) %>%
econdata <- data %>%
select(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
rename_all(tolower) %>%
mutate(propdmgmult = propdmgexp) %>%
mutate(cropdmgmult = cropdmgexp) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == H, 10^2)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == K, 10^3)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == M, 10^6)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == B, 10^9))
econdata <- data %>%
select(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
rename_all(tolower) %>%
mutate(propdmgmult = propdmgexp) %>%
mutate(cropdmgmult = cropdmgexp) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == K, 10^3)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == M, 10^6)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == B, 10^9))
econdata <- data %>%
select(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
rename_all(tolower) %>%
mutate(propdmgmult = propdmgexp) %>%
mutate(cropdmgmult = cropdmgexp) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "H", 10^2)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "K", 10^3)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "M", 10^6)) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "B", 10^9))
str(econdata)
View(head(econdata$propdmgmult, 1000)
View(head(econdata$propdmgmult, 1000))
View(head(econdata$propdmgmult, 1000))
econdata <- data %>%
select(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
rename_all(tolower) %>%
mutate(propdmgmult = propdmgexp) %>%
mutate(cropdmgmult = cropdmgexp) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "H", "100")) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "K", "1000")) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "M", "1000000")) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "B", "1000000000"))
econdata <- data %>%
select(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
rename_all(tolower) %>%
mutate(propdmgmult = propdmgexp) %>%
mutate(cropdmgmult = cropdmgexp)
econdata$propdmgexp <- as.character(econdata$propdmgexp)
econdata$cropdmgexp <- as.character(econdata$cropdmgexp)
econdata$propdmgmult <- as.character(econdata$propdmgmult)
econdata$cropdmgmult <- as.character(econdata$cropdmgmult)
str(econdata)
econdata <- econdata %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "H", "100")) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "K", "1000")) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "M", "1000000")) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "B", "1000000000"))
econdata
econdata <- econdata %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "H", "100")) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "K", "1000")) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "M", "1000000")) %>%
mutate(propdmgmult = replace(propdmgmult, propdmgexp == "B", "1000000000")) %>%
mutate(propery_damage = propdmg * propdmgmult) %>%
mutate(crop_damage = cropdmg * cropdmgmult)
econdata$propdmgmult <- as.numeric(econdata$propdmgmult)
econdata$cropdmgmult <- as.numeric(econdata$cropdmgmult)
econdata <- econdata %>%
mutate(propery_damage = propdmg * propdmgmult) %>%
mutate(crop_damage = cropdmg * cropdmgmult)
econdata
